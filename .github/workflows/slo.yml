name: SLO tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      github_pull_request_number:
        required: true
        description: ''
      slo_workload_duration_seconds:
        default: '600'
        required: false
        description: ''
      slo_workload_read_max_rps:
        default: '1000'
        required: false
        description: ''
      slo_workload_write_max_rps:
        default: '100'
        required: false
        description: ''

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUST_VERSION_OLD: "1.68.0"
  RUST_VERSION_NEW: "1.86.0"

jobs:
  ydb-slo-action-init:
    if: (!contains(github.event.pull_request.labels.*.name, 'no slo'))

    name: Run YDB SLO Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        example:
          - native
        rust_version:
          - "RUST_VERSION_OLD"
          - "RUST_VERSION_NEW"

    concurrency:
      group: slo-${{ github.ref }}-${{ matrix.example }}-${{ matrix.rust_version }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env[matrix.rust_version] }}
          components: clippy

      - name: Rust version
        id: rust_version_step
        run: |
          rustc --version
          cargo --version
          echo "CARGO_INCREMENTAL=$CARGO_INCREMENTAL"
          echo "::set-output name=version::$(rustc --version | cut -d ' ' -f 2)"

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Initialize YDB SLO
        uses: ydb-platform/ydb-slo-action/init@main
        with:
          github_pull_request_number: ${{ github.event.inputs.github_pull_request_number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workload_name: ${{ matrix.example }}-${{ matrix.rust_version }}
          ydb_database_node_count: 5

      - name: Prepare SLO Database
        run: |
          cargo run --example ${{ matrix.example }} grpc://localhost:2135 /Root/testdb tableName create

      - name: Run SLO Tests
        env:
          REF: '${{ github.head_ref || github.ref }}'
        run: |
          cargo run --example ${{ matrix.example }} grpc://localhost:2135 /Root/testdb tableName run \
            --time ${{ inputs.slo_workload_duration_seconds || 600}} \
            --read-rps ${{ inputs.slo_workload_read_max_rps || 1000}} \
            --write-rps ${{ inputs.slo_workload_write_max_rps || 100}} \
            --read-timeout 10000 \
            --write-timeout 10000 || true

      - if: always()
        name: Cleanup SLO Database
        run: |
          cargo run --example ${{ matrix.example }} grpc://localhost:2135 /Root/testdb tableName cleanup

      - if: always()
        name: Store ydb chaos testing logs
        run: |
          docker logs ydb-chaos > chaos-ydb.log

      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example}}-${{ matrix.rust_version }}-chaos-ydb.log
          path: ./chaos-ydb.log
          retention-days: 1